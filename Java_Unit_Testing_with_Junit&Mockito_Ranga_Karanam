-> Prerequisite/Demo Classes

		// Interface
		public interface TodoService()
		{
			public List<String> retrieveTodos(String user);
		}


		public class TodoServiceStub implements TodoService
		{

			public List<String> retrieveTodos(String user)
			{
				List<String> todos = Arrays.asList("Learn Java", "Learn Spring", "Learn SpringBoot");
				return todos;
			}
		}



		public class TodoBusinessImpl
		{
			private TodoService todoService;		// dependency

			// Constructor
			public class TodoBusinessImpl(TodoService todoService)
			{
				this.todoService = todoService;
			}


			// Method of this class
			public List<String> retrieveTodoRelatedToSpring(String user)
			{
				List<String> allTodos = todoSerls(user);

				List<String> filteredTodos = new ArrayList<String>();

				for(String todo: allTodos)
				{
					if(todo.contains("Spring"))
					{
						filteredTodos.add(todo);
					}
				}

				return filteredTodos;
			}
		}






-> List<String> list = Arrays.asList("Learn Java", "Learn Spring", "Learn SpringBoot");


 

-> If you get ExceptionInInitializerError, Use below dependency instead of mockito-all.

	<dependency>
	  <groupId>org.mockito</groupId>
	  <artifactId>mockito-core</artifactId>
	  <version>4.0.0</version>
	  <scope>test</scope>
	</dependency>





-> Some useful imports
	
	import org.hamcrest.Matcher;
	import org.hamcrest.MatcherAssert;
	import org.junit.internal.ArrayComparisonFailure;
	import org.junit.internal.ExactComparisonCriteria;
	import org.junit.internal.InexactComparisonCriteria;




-> Some useful static imports

	import static org.junit.Assert.*;
	import static org.mockito.BDDMockito.*;
	import static org.mockito.Mockito.*;
	import static org.hamcrest.Matchers.*;
	import static org.hamcrest.CoreMatchers.*;



-> Easier Static Imports

	Window > Preferences > Java > Editor > Content Assist > Favorites

		org.junit.Assert
		org.mockito.BDDMockito
		org.mockito.Mockito
		org.hamcrest.Matchers
		org.hamcrest.CoreMatchers





Q. What is mocking?
Ans. mocking is creating objects that simulate the behaviour of real objects.
	 Unlike stubs, mocks can be dynamically created from code - at runtime.
	 Mocks offer more functionality that stubbing. 
	 You can verify method calls and a lot of things.




-> Mockito.mock(Interface or Class)		// Creates mock object of given class or interface

-> Mockito.when(object.method())		// when is used to stub a method




-> Example 1

	TodoService todoServiceMock = Mockito.mock(TodoService.class);
	when(todoServiceMock.retrieveTodos("user")).thenReturn(Arrays.asList("Learn Java", "Learn Spring", "Learn SpringBoot"));




-> Example 2

	@Test
	public void letsMockListSize_ReturnMultipleValues(){
		List listMock = mock(List.class);
		when(listMock.size()).thenReturn(2).thenReturn(3);		

			// 1st time when listMock.size() is called it returns 2
			// 2nd time when listMock.size() is called it returns 3

		assertEquals(2, listMock.size());
		assertEquals(3, listMock.size());
	}





-> Argument Matcher

	1. anyInt()			// org.mockito.Matchers.anyInt()





-> Example 3

	@Test
	public void letsMockListGet(){
		List listMock = mock(List.class);
		when(listMock.get(anyInt())).thenReturn("in28Minutes");	

		assertEquals("in28Minutes", listMock.get(0));
		assertEquals("in28Minutes", listMock.get(1));
	}




-> Example 4: Throw an Exception in Mockito

	@Test(expected = RuntimeException.class)
	public void letsMockListGet_throwAnException(){
		List listMock = mock(List.class);
		when(listMock.get(anyInt())).thenThrow(new RuntimeException("Something"));	

		list.get(3);		// throws a RuntimeException
	}






-> Mockito doesn't allow combination of "Matchers" and "Hardcoded values", in a single method call.



Q. What happens if an unstubbed method is called?
Ans. By default, for all methods that return a value, a mock will return either null, 
	 a primitive/primitive wrapper value, or an empty collection, as appropriate. 
	 For example 0 for an int/Integer and false for a boolean/Boolean.



-> BDD: Behaviour Driven Development


-> BDD Style: Given -> When -> Then





-> BDDMockito class methods

	1. Mockito.when - Mockito.thenReturn
	2. BDDMockito.given - BDDMockito.willReturn


-> assertThat(actual, is(expected))





-> Example 5: Using BDDMockito

	@Test
	public void letsMockListGet_usingBDD(){
		//Given
		List<String> listMock = mock(List.class);
		given(listMock.get(anyInt())).willReturn("in28Minutes");

		//When
		String firstElement = listMock.get(0);

		//Then
		assertThat(firstElement, is("is28Minutes"));
	}







-> Verify calls on Mocks
	1. To check if a method is called or not!
	2. How many times a method is called



// Side Effects....

-> verify(mockObject).methodOfMockObject(Parameter)		// verify that a method is called
   BDD: then(mockObject).should().methodOfMockObject(Parameter)


-> verify(mockObject, never()).methodOfMockObject(Parameter)		// verify that a method is never/not called
   BDD: then(mockObject).should(never()).methodOfMockObject(Parameter)


-> verify(mockObject, times(2)).methodOfMockObject(Parameter)		// verify that given method is called 2 times

-> verify(mockObject, atLeastOnce()).methodOfMockObject(Parameter)	// verify that a method is called at least once 
 
-> verify(mockObject, atLeast(5)).methodOfMockObject(Parameter)	// verify that a method is called at least 5 times









Capturing arguments passed to a Mock
-----------------------------------------------------------
#Repeat
#Revise

-> Steps:
	1. Declare Argument Captor
	2. Define Argument captor on specific method call
	3. Capture the argument



Example:

	//Declare Argument Captor
	ArgumentCaptor<String> stringArgumentCaptor = ArgumentCaptor.forClass(String.class);


	//Define Argument captor on specific method call
	stringArgumentCaptor.capture()

	//Capture the argument
	stringArgumentCaptor.getValue()
	stringArgumentCaptor.getAllValue()






#################################################################
Mockito Advanced
#################################################################


Step 09: Hamcrest Matchers
--------------------------------------------------

-> pom.xml - dependency

	<dependency>
		<groupId>org.hamcrest</groupId>
		<artifactId>hamcrest-library</artifactId>
		<version>1.3</version>
		<scope>test</scope>
	<dependency>




-> Some examples

	// List
	List<Integer> scores = Arrays.asList(99, 100, 101, 105);

	assertThat(scores, hasSize(4));
	assertThat(scores, hasItem(100, 101));
	assertThat(scores, everyItem(greaterThan(90)));
	assertThat(scores, everyItem(lessThan(200)));

	// Strings
	assertThat("", isEmptyString());
	assertThat(null, isEmptyOrNullString());


	// Arrays
	Integer[] marks = {1, 2, 3};

	assertThat(marks, arrayWithSize(3));
	assertThat(marks, arrayContaining(1, 2, 3));
	assertThat(marks, arrayContainingInAnyOrder(2, 3, 1));




-> Some important static imports
	
	import static org.hamcrest.CoreMatchers.*;
	import static org.hamcrest.Matchers.*;











Step 10 : Mockito Annotations - @Mock, @InjectMocks, @RunWith, @Captor..
------------------------------------------------------------------------------------

-> Mockito Annotations
	
	@Mock 			
	@InjectMocks
	@RunWith(MockitoJUnitRunner.class)
	@Captor




-> @Mock 		// import from org.mockito;


Note:
	Prefer using Annotations wherever possible in your projects.



-> Example

	@RunWith(MockitoJUnitRunner.class)
	public class TodoBusinessImplTest
	{
		@Mock
		TodoService todoService;

		@InjectMocks
		TodoBusinessImpl todoBusinessImpl;

		@Captor
		ArgumentCaptor<String> stringArgumentCaptor;

		@Test 
		public void testMethod()
		{

		}
	}










Step 11 : Mockito Junit Rule
-----------------------------------------------------------------------

-> One Junit class can have only one Runner. So only one @RunWith

-> You can have multiple Rules in one unit test class

-> If we put @Rule annotation on a test, the Rule will run before and after the test.


Note: Prefer @Rule over @RunWith



-> Example

	public class TodoBusinessImplTest
	{
		@Rule
		public MockitoRule mockitoRule = MockitoJUnit.rule();

		@Rule
		//some other rule

		@Test 
		public void testMethod()
		{

		}
	}












Step 12 : Real world Mockito Example with Spring
-------------------------------------------------------------------------

-> Example

	@Test
	public void testClientProductSum()
	{
		List<Product> products = Arrays.asList(createProductWithAmount("5.0"), createProductWithAmount("6.0"));

		stub(productDO.getAllProducts(anyInt())).toReturn(products);

		assertAmountEquals(new AmountImpl(new BigDecimal("11.0"), Currency.EURO), 
							clientBO.getClientProductsSum(DUMMY_CLIENT_ID) );
	}










Step 13 : Mockito Spy
---------------------------------------------------------------------------

-> A "Mock" does not get any business logic from actual class it is mocking.


-> A "Spy" gets all logic from the Class, but we can also stub specific methods of our choice.


-> "Spy" is also called a "Partial Mock"

-> Avoid "Spy" in Real World Project



-> Example

	@Test
	public void test(){
		List arrayListSpy = spy(ArrayList.class);
		assertEquals(0, arrayListSpy.size());

		arrayListSpy.add("Dummy");		// It actually adds the element to arrayListSpy
		assertEquals(1, arrayListSpy.size());

		arrayListSpy.remove("Dummy");
		assertEquals(0, arrayListSpy.size());

		// The great thing about "Spy" is, we can override specific methods
		stub(arrayListSpy.size()).toReturn(5);		// From now on size method always returns 5


		verify(arrayListSpy).add("Dummy");
		verify(arrayListSpy, never()).clear();

	}








Step 14 : Theory : Why does Mockito not allow stubbing final & private methods?
-------------------------------------------------------------------------------------------

-> Limitations of Mockito
	1. Cannot mock final classes

	2. Cannot mock static methods
	3. Cannot mock final methods













#################################################################
PowerMock with Mockito
#################################################################


Step 15 : Setting up PowerMock and SystemUnderTest
----------------------------------------------------------------

-> Some useful Snippets

	@RunWith(PowerMockRunner.class)

	@PrepareForTest({list_of_classes_which_are_calling_static_methods})

	@PrepareForTest({SampleClass.class})


	PowerMockito.mockStatic(SampleClass.class);
	when(SampleClass.staticMethod(anyLong())).thenReturn(150);

	PowerMockito.verifyStatic();
	SampleClass.staticMethod(1+2+3);





-> Example

	@RunWith(PowerMockRunner.class)
	@PrepareForTest(UtilityClass.class)
	public class MockingStaticMethodTest {
		// Specific Runner
		// Initialize UtilityClass.class
		// mock

		@Mock
		Dependency dependency;

		@InjectMocks
		SystemUnderTest systemUnderTest;


		@Test
		public void testRetrieveStats() {

			List<Integer> stats = Arrays.asList(1, 2, 3);

			when(dependency.retrieveAllStats()).thenReturn(stats);

			PowerMockito.mockStatic(UtilityClass.class);

			when(UtilityClass.staticMethod(6)).thenReturn(150);

			int result = systemUnderTest.methodCallingAStaticMethod();

			assertEquals(150, result);



			PowerMockito.verifyStatic();
			UtilityClass.staticMethod(6);		// test passes

			PowerMockito.verifyStatic();
			UtilityClass.staticMethod(5);		// test fails
		}
	}





-> Summary

	1. @RunWith(PowerMockRunner.class)
	2. @PrepareForTest(Array of Class having static methods)

	3. PowerMockito.mockStatic(ClassName.class);











Step 16 : Invoking Private Methods
-------------------------------------------------------------------------


-> Example

	@RunWith(PowerMockRunner.class)
	public class MockingStaticMethodTest {
		@Mock
		Dependency dependency;

		@InjectMocks
		SystemUnderTest systemUnderTest;


		@Test
		public void testRetrieveStats() throws Exception {

			List<Integer> stats = Arrays.asList(1, 2, 3);

			when(dependency.retrieveAllStats()).thenReturn(stats);

			long result = Whitebox.invokeMethod(systemUnderTest, "privateMethodUnderTest");

			assertEquals(expected, result);
		}
	}
















Step 17 : Mocking a Constructor
---------------------------------------------------------------

-> Example: PrepareForTest with the class using the Constructor to create the object

	public class SystemUnderTest {
		private Dependency dependency;

		public int methodUsingAnArrayListConstructor() {
			ArrayList list = new ArrayList();

			return list.size();
		}
	}


	// PrepareForTest => SystemUnderTest.class
	// override the constructor


	@RunWith(PowerMockRunner.class)
	@PrepareForTest(SystemUnderTest.class)
	public class MockingStaticMethodTest {

		@Mock
		ArrayList mockList;

		@InjectMocks
		SystemUnderTest systemUnderTest;


		@Test
		public void testMockingAConstructorOfArray() throws Exception {

			List<Integer> stats = Arrays.asList(1, 2, 3);

			when(mockList.size()).thenReturn(5);

			PowerMockito.whenNew(ArrayList.class).withAnyArgument().thenReturn(mockList);

			int size = systemUnderTest.methodUsingAnArrayListConstructor();

			assertEquals(1, size);		// test fails 

			assertEquals(5, size);		// test succeeds   
		}
	}













Step 18 : Writing Good Unit Tests
----------------------------------------------------------------






































































































































































































































